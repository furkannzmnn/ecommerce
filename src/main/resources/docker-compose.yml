version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper

    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

    networks:
      - my-network

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      kafka.bootstrap.servers: broker:9092
      GROUP_ID: group_id
      KAFKA_CREATE_TOPICS: "product"

    networks:
      - my-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=broker
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_READONLY=true

    networks:
      - my-network

  filebeat:
    image: filebeat

    links:
      - "logstash:logstash"
    volumes:
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - $HOME/app:/var/app


  logstash:
    image: logstash
    ports:
      - "5044:5044"
    volumes:
      - $HOME/app:/var/app
    links:
      - "elasticsearch:elasticsearch"
    depends_on:
      - elasticsearch

  elasticsearch:
    image: elasticsearch:6.8.7
    environment:
      - discovery.type=single-node
    volumes:
      - $HOME/app:/var/app

    ports:
      - "9200:9200"
      - "9300:9300"

  kibana:
    image: kibana:6.8.7
    environment:
      SERVER_NAME: kibana.example.org
      ELASTICSEARCH_URL: http://elasticsearch:9200
    links:
      - "elasticsearch:elasticsearch"
    volumes:
      - $HOME/app:/var/app
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch


  ecommerce:

    image: ecommerce
    # assign a name to this containerr
    container_name: ecommerce
    ports:
      - "8089:8089"
    volumes:
      - $HOME/app:/var/app
    # connect this container to the user-defined network
    networks:
      - my-network
    links:
      - "logstash:logstash"

    expose:
      - "8089"
    depends_on:
      - kibana
      - postgresql
      - redis
      - zookeeper
      - broker

    environment:
      - spring.datasource.url=jdbc:postgresql://postgresql:5432/kullanat
      - spring.redis.host=redis
      - spring.redis.port=6379
      - kafka.group.id=group_id
      - kafka.bootstrap.servers=broker:29092
      - kafka.consumer.group.id=group_id
      - kafka.consumer.enable.auto.commit=true
      - kafka.consumer.auto.commit.interval.ms=1000
      - kafka.consumer.auto.offset.reset=earliest
      - kafka.consumer.max.poll.records=1
      - server.port=8089

  postgresql:
    image: postgres:11.1-alpine
    # assign a name to this container
    container_name: postgresql
    volumes:
      - ./postgresql/:/var/lib/postgresql/data/
      # connect this container to the user-defined network my-network
    networks:
      - my-network
    environment:
      - POSTGRES_PASSWORD=123456
      - POSTGRES_USER=postgres
      - POSTGRES_DB=kullanat
    ports:
      - "5432:5432"

  redis:
    image: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - ENV_REDIS_HOST=redis
      - ENV_REDIS_PORT=6379
    networks:
      - my-network
    ports:
      - '127.0.0.1:6379:6379/tcp'

    healthcheck:
        test: redis-cli ping
        interval: 3s
        timeout: 5s
        retries: 5

    volumes:
      - $HOME/app:/var/app
    expose:
      - "6379"


networks:
  my-network:

